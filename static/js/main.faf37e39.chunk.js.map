{"version":3,"sources":["plotter.abi.js","App.js","index.js"],"names":["abi","constant","inputs","name","outputs","type","payable","stateMutability","anonymous","indexed","QueryLines","gql","_templateObject","clampAndParse","coord","c","parseInt","LineNode","delete","evt","preventDefault","_this","props","index","react_default","a","createElement","Object","assign","onClick","this","Component","SVGRenderer","state","startNode","escFunction","keyCode","_this2","setState","startPoint","newNode","x1","x","x2","position","y1","y","y2","addTempNode","removeNode","indx","document","addEventListener","removeEventListener","_this3","className","style","width","height","data","lineSets","map","lineSet","lines","currentLine","lastLine","out","length","push","fromX","toX","fromY","toY","on","p","transformLines","line","i","key","concat","id","stroke","strokeWidth","tempNodes","tempNode","App_LineNode","App","nodes","_this4","start","contractInstance","window","web3","eth","contract","at","aryX","aryY","aryPlot","forEach","anode","console","log","getAccounts","error","accounts","drawLines","sendTransaction","from","err","txnHash","refetch","startPolling","loading","ReactCursorPosition","App_SVGRenderer","class","graphql","client","ApolloClient","uri","fm","Fortmatic","Web3","getProvider","ReactDOM","render","react_apollo_browser_umd","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.faf37e39.chunk.js","sourcesContent":["export const abi = [\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"lastDrawingId\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"x\",\n\t\t\t\t\"type\": \"uint32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"y\",\n\t\t\t\t\"type\": \"uint32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"p\",\n\t\t\t\t\"type\": \"bool[]\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"drawLines\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [],\n\t\t\"name\": \"resetDrawing\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"startDrawingId\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bytes32\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"name\": \"x\",\n\t\t\t\t\"type\": \"uint32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"name\": \"y\",\n\t\t\t\t\"type\": \"uint32[]\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"name\": \"p\",\n\t\t\t\t\"type\": \"bool[]\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"DrawLines\",\n\t\t\"type\": \"event\"\n\t}\n];","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport ReactCursorPosition from 'react-cursor-position';\nimport { abi } from './plotter.abi';\nimport './App.css';\n\nconst QueryLines = gql`\nquery allPosts {\n  lineSets(last: 20) {\n    id\n    x\n    y\n    p\n  }\n}\n`;\n\nfunction clampAndParse(coord) {\n  let c = parseInt(coord);\n  if (c < 0) {\n    return 0;\n  }\n  if (c > 1000) {\n    return 1000;\n  }\n  return c;\n}\n\nfunction transformLines(lines) {\n  let currentLine = 0;\n  let lastLine = 0;\n  const out = [];\n  while (++currentLine < lines.x.length) {\n    out.push({\n      fromX: clampAndParse(lines.x[lastLine]),\n      toX: clampAndParse(lines.x[currentLine]),\n      fromY: clampAndParse(lines.y[lastLine]),\n      toY: clampAndParse(lines.y[currentLine]),\n      on: lines.p[currentLine],\n    });\n    lastLine = currentLine;\n  }\n  return out;\n}\n\nclass LineNode extends Component {\n  delete = (evt) => {\n    evt.preventDefault();\n    this.props.delete(this.props.index);\n  }\n  render() {\n    return <line onClick={this.delete} {...this.props} />;\n  }\n}\n\nclass SVGRenderer extends Component {\n  state = {\n    startNode: null,\n  };\n\n  escFunction = (evt) => {\n    if (evt.keyCode === 27) {\n      this.setState({ startNode: null });\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.escFunction, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.escFunction, false);\n  }\n\n\n  startPoint = () => {\n    if (this.state.startNode) {\n      const newNode = { x1: this.state.startNode.x, x2: this.props.position.x, y1: this.state.startNode.y, y2: this.props.position.y };\n      this.setState({ startNode: null });\n      this.props.addTempNode(newNode);\n      return;\n    }\n    this.setState({ startNode: this.props.position });\n  }\n\n  removeNode = (indx) => {\n    // this.setState({ tempNodes: this.state.tempNodes.filter((tempNode, i) => i == indx), startNode: null });\n  }\n\n  render() {\n    return (\n      <svg className=\"canvas\" onClick={this.startPoint} style={{ width: '800px', height: '600px' }}>\n        {this.props.data.lineSets.map((lineSet) => transformLines(lineSet).map((line, i) => (\n          <line key={`${lineSet.id}-${i}`} x1={line.fromX} y1={line.fromY} x2={line.toX} y2={line.toY} style={{ stroke: 'blue', strokeWidth: 3 }} />\n        )))}\n        {this.state.startNode && (\n          <line key=\"start\" x1={this.state.startNode.x} x2={this.props.position.x} y1={this.state.startNode.y} y2={this.props.position.y} style={{ stroke: 'red', strokeWidth: 3 }} />\n        )}\n        {this.props.tempNodes.map((tempNode, i) => (\n          <LineNode delete={this.removeNode} index={i} key={`temp${i}`} x1={tempNode.x1} x2={tempNode.x2} y1={tempNode.y1} y2={tempNode.y2} style={{ stroke: 'green', strokeWidth: 3 }} />\n        ))}\n      </svg>\n    );\n  }\n}\n\nclass App extends Component {\n  state = { nodes: [] };\n\n  addTempNode = (tempNode) => {\n    this.setState({ nodes: this.state.nodes.concat(tempNode) });\n  }\n\n  start = (evt) => {\n    evt.preventDefault();\n\n    // Create contract object\n    const contractAddress = '0x21B1dDc150bF8589f3200BeAff1bFD8e77b201D5';\n\n    // Create contract object\n    const contract = window.web3.eth.contract(abi);\n\n    // Instantiate contract\n    const contractInstance = contract.at(contractAddress);\n\n    const aryX = [];\n    const aryY = [];\n    const aryPlot = [];\n    this.state.nodes.forEach((anode) => {\n      console.log('has ndoe', anode);\n      aryX.push(anode.x1);\n      aryX.push(anode.x2);\n      aryY.push(anode.y1);\n      aryY.push(anode.y2);\n      aryPlot.push(true);\n      aryPlot.push(true);\n    });\n\n    // Get user account wallet address first\n    window.web3.eth.getAccounts((error, accounts) => {\n      if (error) throw error;\n      // Make the contract call.\n      contractInstance.drawLines.sendTransaction(\n        aryX,\n        aryY,\n        aryPlot,\n        { from: accounts[0] },\n        (err, txnHash) => {\n          this.setState({ nodes: [] });\n          console.log(err, txnHash);\n          this.props.data.refetch();\n        });\n    });\n  }\n\n  startPoint = (evt) => {\n  }\n\n  componentDidMount() {\n    this.props.data.startPolling(4000);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>EthaSketch</h1>\n        <div>\n          {this.props.data.loading ? (<span>loading</span>) : (\n            <ReactCursorPosition>\n              <SVGRenderer addTempNode={this.addTempNode} tempNodes={this.state.nodes} data={this.props.data} />\n            </ReactCursorPosition>\n          )}\n        </div>\n        <button class=\"go\" onClick={this.start}>Sketch on Blockchain</button>\n      </div>\n    );\n  }\n}\n\nexport default graphql(QueryLines)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Fortmatic from 'fortmatic';\nimport Web3 from 'web3';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport './index.css';\nimport 'typeface-roboto';\n\nconst client = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/iainnash/plotterlinewriter'\n})\n\n\nconst fm = new Fortmatic('pk_test_F69F68D2FD22535B');\nwindow.web3 = new Web3(fm.getProvider());\n\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'));\n"],"sourceRoot":""}